1188:        m_allocator(alloc) {
1189:    m_stats = new ((tree_stats*)pmalloc(sizeof(tree_stats))) tree_stats;
1192:      pmemalloc_activate(m_stats);
1203:        m_allocator(alloc),
1216:        m_allocator(alloc),
1231:        m_allocator(alloc),
1248:    std::swap(m_allocator, from.m_allocator);
1321:    return m_allocator;
1339:  inline leaf_node* allocate_leaf() {
1341:    leaf_node *n = new ((leaf_node*)pmalloc(sizeof(leaf_node))) leaf_node;
1343:      pmemalloc_activate(n);
1351:  inline inner_node* allocate_inner(unsigned short level) {
1353:    inner_node *n = new ((inner_node*)pmalloc(sizeof(inner_node))) inner_node;
1355:      pmemalloc_activate(n);
1369:      a.deallocate(ln, 1);
1375:      a.deallocate(in, 1);
1873:      m_allocator = other.get_allocator();
1897:        m_allocator(other.get_allocator()) {
1913:      leaf_node *newleaf = allocate_leaf();
1932:      inner_node *newinner = allocate_inner(inner->level);
2010:      (*m_root) = m_headleaf = m_tailleaf = allocate_leaf();
2017:      inner_node *newroot = allocate_inner((*m_root)->level + 1);
2191:    leaf_node *newleaf = allocate_leaf();
2238:    inner_node *newinner = allocate_inner(inner->level);
2275:      leaf_node* leaf = allocate_leaf();
2315:      pmemalloc_activate(nextlevel);
2320:      inner_node* n = allocate_inner(1);
2356:        inner_node* n = allocate_inner(level);
3650:      leaf_node *newleaf = allocate_leaf();
3673:      inner_node *newinner = allocate_inner(0);
3696: * and self-verification. Furthermore an allocator can be specified for tree
3820:      : tree(_root, alloc) {
3827:      : tree(kcf, alloc) {
3834:      : tree(first, last, alloc) {
3842:      : tree(first, last, kcf, alloc) {
3873:    return tree.get_allocator();
